import org.apache.log4j.{Level, Logger}
import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.mllib.clustering.{KMeans, KMeansModel}
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint

/**
  * Created by Manikanta on 1/31/2017.
  */
object fourclasses {

  def main(args: Array[String]): Unit = {

    //System.setProperty("hadoop.home.dir","C:\\Users\\Manikanta\\Documents\\UMKC Subjects\\PB\\hadoopforspark");

    val sparkConf = new SparkConf().setAppName("SparkWordCount").setMaster("local[*]")

    val sc = new SparkContext(sparkConf)

    // Turn off Info Logger for Consolexxx
    Logger.getLogger("org").setLevel(Level.OFF);
    Logger.getLogger("akka").setLevel(Level.OFF);
    // Load and parse the data
    val data = sc.textFile("/Users/jin/Desktop/big-data/CS5542-Tutorial2A-SourceCode/CS5542-Tutorial2A-SourceCode/kMeans/data/3D_spatial_network.txt")
    val parsedData = data.map(s => Vectors.dense(s.split(',').map(_.toDouble))).cache()
    parsedData.foreach(f=>println(f))
    // Cluster the data into three classes using KMeans
    val numClusters = 4
    val numIterations = 20
    val clusters = KMeans.train(parsedData, numClusters, numIterations)

    // Evaluate clustering by computing Within Set Sum of Squared Errors
    val WSSSE = clusters.computeCost(parsedData)
    println("Within Set Sum of Squared Errors = " + WSSSE)

    //Look at how the clusters are in training data by making predictions
    println("Clustering on training data: ")
    clusters.predict(parsedData).zip(parsedData).foreach(f=>println(f._2,f._1))

    // Save and load model
    clusters.save(sc, "/Users/jin/Desktop/big-data/CS5542-Tutorial2A-SourceCode/CS5542-Tutorial2A-SourceCode/kMeans/data")
    val sameModel = KMeansModel.load(sc, "/Users/jin/Desktop/big-data/CS5542-Tutorial2A-SourceCode/CS5542-Tutorial2A-SourceCode/kMeans/data")

    //val parsedData = data.map(line => (line.split(",")(1).toDouble, line.split(",")(2).toDouble, line.split(",")(3).toDouble))
    //val pdata = data.map(s => Vectors.dense(s.split(',').map(_.toDouble))).cache()
    //val parsedData = data.map(line => (line.split(",")(1), line.split(",")(2), line.split(",")(3))).cache()
    //parsedData.foreach(f=>println(f))


    //val adata = data.map(line => line.split(',')).take(2)
    //val parsedData = data.map { line =>
      //val parts = line.split(',')
      //LabeledPoint(parts(1).toDouble, parts(2).toDouble, parts(3).toDouble)
    //}.cache()
    //parsedData.foreach(f=>println(f))


    //val pdata = mdata.map(s => Vectors.dense(s.split(',').map(_.toDouble))).cache()

    //val udata = pdata.map(line => line.replace('\t', ','))
    //val parsedData = mdata.map(s => Vectors.dense(s.split(',').map(_.toDouble))).cache()


    //Look at how training data is!


  }


}
